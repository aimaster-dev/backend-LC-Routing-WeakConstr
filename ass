# ===============================
# Main Function: generate_route_map
# ===============================
# This asynchronous function processes one route (identified by location_id).
# async def generate_route_map(location_id: str):
#     SERVICE_TIME_PER_STOP = 10/60  # minutes

#     filtered_df = pd.read_csv('uploaded_files/new_data_2025.csv')
#     filtered_df["Route #"] = filtered_df["Route #"].astype(str)
#     API_KEY = 'xxx'
#     ESRI = True
#     trial = True
#     dictionary_outcome = {}

#     land_fill_data_frame = pd.read_csv('uploaded_files/landFill_Haul.csv')
#     land_fill_data_frame["Cost"] = land_fill_data_frame["Cost/Ton"].str.split('/').str[0].astype(float)

#     df_route = filtered_df[filtered_df['Route #'] == location_id].copy()
#     df_route['haul_center_address'] = df_route.apply(
#         lambda row: f"{row['HF_ADDRESS_LINE1']}, {row['HF_ADDRESS_CITY']}, {row['HF_ADDRESS_STATE']}",
#         axis=1
#     )
#     df_route['lf_address'] = df_route.apply(
#         lambda row: f"{row['DF_ADDRESS_LINE1']}, {row['DF_ADDRESS_CITY']}, {row['DF_ADDRESS_STATE']}",
#         axis=1
#     )

#     sorted_df = df_route.sort_values(by=['Route #', 'SEQUENCE'])
#     result_dict = (sorted_df
#                    .groupby('Route #')
#                    .apply(lambda group: [(row['Latitude'], row['Longitude']) for _, row in group.iterrows()])
#                    .to_dict())
#     dummList = result_dict[location_id]
#     haul_center_address = df_route.iloc[0]['haul_center_address']
#     lf_address = df_route.iloc[0]['lf_address']
#     midpoint = (df_route.iloc[0]['HL_Lat'], df_route.iloc[0]['HL_Longt'])
#     landfill_locs = [(df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'])]

#     containers = [-1, -1]
#     swg = [np.nan, np.nan]
#     service_time = []
#     # Initialize PERM_NOTES with placeholder values for depot stops.
#     perm_notes = ["", ""]  
#     land_fill_dic = {}
#     swing_decisions = [False, False]

#     DEFAULT_LOCATIONS = [
#         (midpoint[0], midpoint[1], "Hauling"),
#         (df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'], "LF")
#     ]
#     locations = [
#         (midpoint[0], midpoint[1]),
#         (df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'])
#     ]
#     land_fill_dic['LF1'] = (df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'])

#     for loc in dummList:
#         locations.append(loc)

#     DEFAULT_CONTAINERS = {}
#     for ii in range(1, len(dummList) + 1):
#         DEFAULT_CONTAINERS[f"Stop {ii}"] = "30"
#         DEFAULT_LOCATIONS.append((locations[len(locations) - len(dummList) + ii - 1][0],
#                                   locations[len(locations) - len(dummList) + ii - 1][1],
#                                   f"Stop {ii}"))

#     stops11 = create_default_stops(1, land_fill_dic, DEFAULT_LOCATIONS, DEFAULT_CONTAINERS)

#     for i in range(len(swg), len(locations)):
#         match = df_route[(df_route['Latitude'] == locations[i][0]) & 
#                          (df_route['Longitude'] == locations[i][1])]
#         containers.append(str(match.iloc[0]['CURRENT_CONTAINER_SIZE']))
#         service_type = match.iloc[0]['SERVICE_TYPE_CD']
#         service_time.append(float(match.iloc[0]['SERVICE_WINDOW_TIME']) / 60)
#         # Append the PERM_NOTES value for this stop:
#         perm_notes.append(match.iloc[0]['PERM_NOTES'])
#         if service_type == 'SWG':
#             swg.append(1)
#             swing_decisions.append(True)
#         else:
#             swg.append(0)
#             swing_decisions.append(False)

#     # --- Simplified Manual Route-Building Logic ---
#     # Simply build the route in file order: depot then every stop then depot.
#     route = [0]
#     for pointer in range(len(land_fill_dic) + 1, len(containers)):
#         route.append(pointer)
#     route.append(0)
#     # --- End Simplified Manual Route-Building Logic ---

#     # --- Group stops for optimization ---
#     # Only group DRT stops (swg==0) for TSP optimization; SWG stops remain in file order.
#     fullDictionary = {}
#     time_windows_dictionary = {}
#     for idx, val in enumerate(containers):
#         if val == -1:
#             continue
#         if swg[idx] == 0:
#             fullDictionary.setdefault('Null', []).append(idx)
#         time_windows_dictionary[idx] = [0, 60*8]

#     # --- Compute distance and time matrices ---
#     dist_matrix, time_matrix = calculate_distance_and_time_matrix(locations)

#     # --- Simplified Optimal Route-Building Logic ---
#     # Use the manual route as base, and re-order only the DRT stops.
#     manual_route = route[:]  # file order
#     if 'Null' in fullDictionary:
#         optimized_drt = TSP_solver(fullDictionary['Null'], time_matrix)
#         routeOptimizedNew = []
#         drt_index = 0
#         for idx in manual_route:
#             if idx > len(landfill_locs) and swg[idx] == 0:
#                 if drt_index < len(optimized_drt):
#                     routeOptimizedNew.append(optimized_drt[drt_index])
#                     drt_index += 1
#                 else:
#                     routeOptimizedNew.append(idx)
#             else:
#                 routeOptimizedNew.append(idx)
#         if routeOptimizedNew[0] != 0:
#             routeOptimizedNew = [0] + routeOptimizedNew
#         if routeOptimizedNew[-1] != 0:
#             routeOptimizedNew.append(0)
#     else:
#         routeOptimizedNew = manual_route
#     # --- End Simplified Optimal Route-Building Logic ---

#     containerOnTruck = ['Null']
#     route_optimized_full_info = {}
#     runas_optimal = []
#     swing_decisions_opt = []
#     routeIDOptimal = []
#     for nu, i in enumerate(routeOptimizedNew):
#         if i == 0:
#             name = 'Haul'
#             runas_optimal.append('Haul')
#             swing_decisions_opt.append(False)
#         elif i <= len(landfill_locs):
#             name = 'LF1'
#             runas_optimal.append('LF1')
#             swing_decisions_opt.append(False)
#         else:
#             name = f"Stop {i - len(landfill_locs)}"
#             route_optimized_full_info[i] = swg[i]
#             if swg[i] == 0:
#                 runas_optimal.append('DRT')
#                 swing_decisions_opt.append(False)
#             else:
#                 runas_optimal.append('SWG')
#                 swing_decisions_opt.append(True)
#         routeIDOptimal.append(name)

#     # (Removed extra loop that appended additional stops from fullDictionary.)

#     distanceTot = 0
#     timeTot = 0
#     cummDist = [distanceTot]
#     cummTime = [timeTot]
#     for i in range(len(routeOptimizedNew)-1):
#         if trial:
#             distanceTot += dist_matrix[routeOptimizedNew[i], routeOptimizedNew[i+1]]
#             cummDist.append(distanceTot)
#             timeTot += time_matrix[routeOptimizedNew[i], routeOptimizedNew[i+1]]
#             cummTime.append(timeTot)
#         else:
#             distance_dummy, time_dummy = travel_time_Google(
#                 locations[routeOptimizedNew[i]][1], locations[routeOptimizedNew[i]][0],
#                 locations[routeOptimizedNew[i+1]][1], locations[routeOptimizedNew[i+1]][0],
#                 API_KEY
#             )
#             try:
#                 distance_dummy = float(distance_dummy.replace(' mi', ''))
#             except:
#                 distance_dummy = 1
#             distanceTot += distance_dummy
#             cummDist.append(distanceTot)
#             timeTot += time_dummy
#             cummTime.append(timeTot)
#     total_service_time = sum(service_time)
#     totalDrivingTimeOptimal = cummTime[-1] + total_service_time
#     totalDrivingDistanceOptimal = cummDist[-1]
#     distanceTotManual = 0
#     timeTotManual = 0
#     cummDistManual = [distanceTotManual]
#     cummTimeManual = [timeTotManual]
#     for i in range(len(route)-1):
#         if trial:
#             distanceTotManual += dist_matrix[route[i], route[i+1]]
#             cummDistManual.append(distanceTotManual)
#             timeTotManual += time_matrix[route[i], route[i+1]]
#             cummTimeManual.append(timeTotManual)
#         else:
#             distance_dummy, time_dummy = travel_time_Google(
#                 locations[route[i]][1], locations[route[i]][0],
#                 locations[route[i+1]][1], locations[route[i+1]][0],
#                 API_KEY
#             )
#             try:
#                 distance_dummy = float(distance_dummy.replace(' mi', ''))
#             except:
#                 distance_dummy = 1
#             distanceTotManual += distance_dummy
#             cummDistManual.append(distanceTotManual)
#             timeTotManual += time_dummy
#             cummTimeManual.append(timeTotManual)
#     total_service_time = sum(service_time)
#     totalDrivingTimeManual = cummTimeManual[-1] + total_service_time
#     totalDrivingDistanManual = cummDistManual[-1]

#     routeID = []
#     runas_manual = []
#     swing_decisionsManual = []
#     route_manual_full_info = {}
#     for nu, i in enumerate(route):
#         if i == 0:
#             runas_manual.append('Haul')
#             name = 'Haul'
#             swing_decisionsManual.append(False)
#         elif i <= len(landfill_locs):
#             name = 'LF1'
#             runas_manual.append('LF1')
#             swing_decisionsManual.append(False)
#         else:
#             name = f"Stop {i - len(landfill_locs)}"
#             route_manual_full_info[i] = swg[i]
#             if swg[i] == 1:
#                 runas_manual.append('SWG')
#                 swing_decisionsManual.append(True)
#             else:
#                 runas_manual.append('DRT')
#                 swing_decisionsManual.append(False)
#         routeID.append(name)

#     routeIDOptimal_list = []
#     for nu, i in enumerate(routeOptimizedNew):
#         if i == 0:
#             name = 'Haul'
#         elif i <= len(landfill_locs):
#             name = 'LF1'
#         else:
#             name = f"Stop {i - len(landfill_locs)}"
#         routeIDOptimal_list.append(name)

#     dictionary_outcome[location_id] = [
#         totalDrivingTimeOptimal, totalDrivingDistanceOptimal,
#         totalDrivingTimeManual, totalDrivingDistanManual,
#         np.round(swg.count(0)/(len(swg)-len(landfill_locs)-1)*100, 2),
#         np.round(swg.count(1)/(len(swg)-len(landfill_locs)-1)*100, 2),
#         len(swg)-len(landfill_locs)-1,
#         [routeIDOptimal_list, runas_optimal],
#         [routeID, runas_manual]
#     ]

#     newStops = []
#     for i in routeOptimizedNew:
#         if i <= len(landfill_locs):
#             continue
#         if i not in newStops:
#             newStops.append(i)
#     optimal_sequence = create_route_stops(1, newStops, land_fill_dic, locations, landfill_locs)
#     hauling_loc_coord = (df_route.iloc[0]['HL_Lat'], df_route.iloc[0]['HL_Longt'])
#     print("stop11 optimal: ", stops11)
#     print("optimal_sequence: ", optimal_sequence)
#     print("length of optimal_sequence: ", len(optimal_sequence))
#     route_map_optimal = RouteVisualizer.create_map(
#         stops=stops11,
#         sequence=optimal_sequence,
#         route_info=route_optimized_full_info,
#         swing_decisions=swing_decisionsManual,
#         landfill_locs=landfill_locs,
#         hauling_loc=hauling_loc_coord
#     )
#     new_s = location_id.replace("/", "_")
#     route_map_optimal.save(f"maps/optimal_map{new_s}.html")

#     newStopsManual = []
#     for i in route:
#         if i <= len(landfill_locs):
#             continue
#         if i not in newStopsManual:
#             newStopsManual.append(i)
#     manual_sequence = create_route_stops(1, newStopsManual, land_fill_dic, locations, landfill_locs)
#     print("stop11 optimal: ", stops11)
#     print("manual_sequence: ", manual_sequence)
#     print("length of manual_sequence: ", len(manual_sequence))
#     route_map_manual = RouteVisualizer.create_map(
#         stops=stops11,
#         sequence=manual_sequence,
#         route_info=route_manual_full_info,
#         swing_decisions=swing_decisionsManual,
#         landfill_locs=landfill_locs,
#         hauling_loc=hauling_loc_coord
#     )
#     route_map_manual.save(f"maps/manual_map{new_s}.html")
#     print(f"Maps saved for route {location_id}")

#     rows = []
#     for k, v in dictionary_outcome.items():
#         row = [k] + v[:7] + [v[7], v[8]]
#         rows.append(row)
#     columns = ["Route_ID", "Driving Time (min) Optimal", "Driving Distance (mile) Optimal", 
#                "Driving Time (min.) Manual", "Driving Distance (mile) Manual", 'Percentage of DRT', 
#                'Percentage of Swing', 'Number of Stops', 'Route Optimal', 'Route Manual']
    
#     df_results = pd.DataFrame(rows, columns=columns)
#     df_results.to_csv('IND_results.csv', index=False)

#     # === New Code: Save sequences row wise to "sequence_row.csv" ===
#     def get_stop_name(idx):
#         if idx == 0:
#             return "Haul"
#         elif idx == 1:
#             return "LF"
#         else:
#             return f"Stop {idx - len(landfill_locs)}"
#     updated_routeOptimizedNew = []
#     for i in range(len(routeOptimizedNew)):
#         start_idx = routeOptimizedNew[i]
#         if start_idx < 2 and i > 0 and i < len(routeOptimizedNew) - 1:
#             continue
#         updated_routeOptimizedNew.append(start_idx)
#     # optimal_segments = []
#     # print(updated_routeOptimizedNew)
#     # print("routeOptimzedNew: ", updated_routeOptimizedNew)
#     # for i in range(len(updated_routeOptimizedNew) - 1):
#     #     start_idx = updated_routeOptimizedNew[i]
#     #     print(start_idx)
#     #     end_idx = updated_routeOptimizedNew[i + 1]
#     #     segment_str = f"{get_stop_name(start_idx)} -> {get_stop_name(end_idx)}"
#     #     travel_time_min = time_matrix[start_idx, end_idx] * 60
#     #     additional_service_time = 0
#     #     if end_idx > 1:
#     #         service_index = end_idx - 2  
#     #         if service_index < len(service_time):
#     #             additional_service_time = service_time[service_index]
#     #     total_segment_time = travel_time_min + additional_service_time * 60
#     #     seg_distance = dist_matrix[start_idx, end_idx]
#     #     print(start_idx, end_idx)
#     #     print("distmatrix: ", dist_matrix)
#     #     optimal_segments.append({
#     #         "Route_ID": location_id,
#     #         "Route_Type": "Optimal",
#     #         "Segment": segment_str,
#     #         "Time (min)": round(total_segment_time, 2),
#     #         "Distance (km)": round(seg_distance, 2),
#     #         "PERM_NOTES": perm_notes[start_idx],   # Added PERM_NOTES from the starting stop
#     #         "Service_time": additional_service_time * 60
#     #     })
#     # print(optimal_segments)

#     optimal_segments = []
#     print("routeOptimzedNew: ", routeOptimizedNew)
#     for i in range(len(routeOptimizedNew) - 1):
#         start_idx = routeOptimizedNew[i]
#         print(start_idx)
#         end_idx = routeOptimizedNew[i + 1]
#         segment_str = f"{get_stop_name(start_idx)} -> {get_stop_name(end_idx)}"
#         travel_time_min = time_matrix[start_idx, end_idx] * 60
#         additional_service_time = 0
#         if end_idx > 1:
#             service_index = end_idx - 2  
#             if service_index < len(service_time):
#                 additional_service_time = service_time[service_index]
#         total_segment_time = travel_time_min + additional_service_time * 60
#         seg_distance = dist_matrix[start_idx, end_idx]
#         print(start_idx, end_idx)
#         print("distmatrix: ", dist_matrix)
#         optimal_segments.append({
#             "Route_ID": location_id,
#             "Route_Type": "Optimal",
#             "Segment": segment_str,
#             "Time (min)": round(total_segment_time, 2),
#             "Distance (km)": round(seg_distance, 2),
#             "PERM_NOTES": perm_notes[start_idx],   # Added PERM_NOTES from the starting stop
#             "Service_time": additional_service_time * 60
#         })
#     print(optimal_segments)

#     manual_segments = []
#     for i in range(len(route) - 1):
#         start_idx = route[i]
#         end_idx = route[i + 1]
#         segment_str = f"{get_stop_name(start_idx)} -> {get_stop_name(end_idx)}"
#         travel_time_min = time_matrix[start_idx, end_idx] * 60
#         additional_service_time = 0
#         if end_idx > 1:
#             service_index = end_idx - 2
#             if service_index < len(service_time):
#                 additional_service_time = service_time[service_index]
#         total_segment_time = travel_time_min + additional_service_time * 60
#         seg_distance = dist_matrix[start_idx, end_idx]
#         manual_segments.append({
#             "Route_ID": location_id,
#             "Route_Type": "Manual",
#             "Segment": segment_str,
#             "Time (min)": round(total_segment_time, 2),
#             "Distance (km)": round(seg_distance, 2),
#             "PERM_NOTES": perm_notes[start_idx],   # Added PERM_NOTES from the starting stop
#             "Service_time": additional_service_time * 60
#         })

#     all_segments = optimal_segments + manual_segments
#     seq_csv_file = "sequence_row.csv"
#     df_seq = pd.DataFrame(all_segments)
#     print(df_seq)
#     df_seq.to_csv(seq_csv_file, index=False)
#     return {location_id: (route_map_optimal, route_map_manual)}


# def clean_route_id(corrupted_id: str) -> str:
#     # Remove all hyphens not part of date format or suffix
#     # This pattern matches digits with hyphens in between (e.g., 3-3-3-5) and joins them
#     parts = corrupted_id.split('_')
#     cleaned_parts = []
#     for part in parts:
#         digits = re.sub(r'(?<=\d)-(?=\d)', '', part)
#         cleaned_parts.append(digits)
#     return '_'.join(cleaned_parts)

# async def generate_route_map(location_id: str):
#     SERVICE_TIME_PER_STOP = 10/60  # minutes

#     filtered_df = pd.read_csv('uploaded_files/transformed_data_snowflk.csv')
#     filtered_df["Route #"] = filtered_df["Route #"].astype(str)
#     API_KEY = 'xxx'
#     ESRI = True
#     trial = True
#     dictionary_outcome = {}
#     location_id_for_name = location_id.replace("/", "_")
#     land_fill_data_frame = pd.read_csv('uploaded_files/landFill_Haul.csv')
#     land_fill_data_frame["Cost"] = land_fill_data_frame["Cost/Ton"].str.split('/').str[0].astype(float)
#     route_location_id = location_id.rsplit("-", 1)[0]
#     df_route = filtered_df[filtered_df['Route #'] == route_location_id].copy()
#     df_route['haul_center_address'] = df_route.apply(
#         lambda row: f"{row['HF_ADDRESS_LINE1']}, {row['HF_ADDRESS_CITY']}, {row['HF_ADDRESS_STATE']}",
#         axis=1
#     )
#     df_route['lf_address'] = df_route.apply(
#         lambda row: f"{row['DF_ADDRESS_LINE1']}, {row['DF_ADDRESS_CITY']}, {row['DF_ADDRESS_STATE']}",
#         axis=1
#     )

#     sorted_df = df_route.sort_values(by=['Route #', 'SEQUENCE'])
#     result_dict = (sorted_df
#                    .groupby('Route #')
#                    .apply(lambda group: [(row['Latitude'], row['Longitude']) for _, row in group.iterrows()])
#                    .to_dict())
#     print(result_dict)
#     dummList = result_dict[route_location_id]
#     haul_center_address = df_route.iloc[0]['haul_center_address']
#     lf_address = df_route.iloc[0]['lf_address']
#     midpoint = (df_route.iloc[0]['HL_Lat'], df_route.iloc[0]['HL_Longt'])
#     landfill_locs = [(df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'])]

#     containers = [-1, -1]
#     swg = [np.nan, np.nan]
#     service_time = []
#     perm_notes = ["", ""]
#     land_fill_dic = {}
#     swing_decisions = [False, False]

#     DEFAULT_LOCATIONS = [
#         (midpoint[0], midpoint[1], "Hauling"),
#         (df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'], "LF")
#     ]
#     locations = [
#         (midpoint[0], midpoint[1]),
#         (df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'])
#     ]
#     land_fill_dic['LF1'] = (df_route.iloc[0]['DF_Lat'], df_route.iloc[0]['DF_Longt'])

#     for loc in dummList:
#         locations.append(loc)

#     DEFAULT_CONTAINERS = {}
#     for ii in range(1, len(dummList) + 1):
#         DEFAULT_CONTAINERS[f"Stop {ii}"] = "30"
#         DEFAULT_LOCATIONS.append((locations[len(locations) - len(dummList) + ii - 1][0],
#                                   locations[len(locations) - len(dummList) + ii - 1][1],
#                                   f"Stop {ii}"))

#     stops11 = create_default_stops(1, land_fill_dic, DEFAULT_LOCATIONS, DEFAULT_CONTAINERS)

#     for i in range(len(swg), len(locations)):
#         match = df_route[(df_route['Latitude'] == locations[i][0]) & 
#                          (df_route['Longitude'] == locations[i][1])]
#         containers.append(str(match.iloc[0]['CURRENT_CONTAINER_SIZE']))
#         service_type = match.iloc[0]['SERVICE_TYPE_CD']
#         service_time.append(float(match.iloc[0]['SERVICE_WINDOW_TIME'])/60) 
#         perm_notes.append(match.iloc[0]['PERM_NOTES'])
#         if service_type == 'SWG':
#             swg.append(1)
#             swing_decisions.append(True)
#         else:
#             swg.append(0)
#             swing_decisions.append(False)

#     route = [0]
#     pointer = len(land_fill_dic) + 1
#     while pointer < len(containers):
#         route.append(pointer)
#         if swg[pointer] == 0:
#             route.append(1)
#             route.append(pointer)
#             pointer += 1
#         else:
#             if pointer < len(containers) - 1:
#                 pointer += 1
#                 continue
#             else:
#                 route.append(0)
#                 break
#     if route[-1] != 0:
#         route.append(0)

#     fullDictionary = {}
#     time_windows_dictionary = {}
#     print("containersdasdfasdf: ", containers)
#     for idx, val in enumerate(containers):
#         if val == -1:
#             continue
#         if swg[idx] == 1:
#             # fullDictionary.setdefault(val, []).append(idx)
#             fullDictionary.setdefault('Null', []).append(idx)
#         else:
#             fullDictionary.setdefault('Null', []).append(idx)
#         time_windows_dictionary[idx] = [0, 60*8]

#     routeOptimizedNew = [0]
#     arrival_time = 0
#     dist_matrix, time_matrix = calculate_distance_and_time_matrix(locations)
    
#     print("1Q1Q1Q1Q1Q1Q1Q", fullDictionary)
#     if 'Null' in fullDictionary:
#         # print("2W2W2W2W2W2W2W")
#         sequence = TSP_solver(fullDictionary['Null'], time_matrix)
#         routeOptimizedNew = [0]
#         for i in range(1, len(sequence)-1):
#             routeOptimizedNew.append(sequence[i])
#             if i == 1:
#                 arrival_time += time_matrix[0, sequence[i]]
#             else:
#                 arrival_time += time_matrix[sequence[i-1], sequence[i]]
#             # print("swgswgswgasfasdfasdfasdf: ", swg[sequence[i]])
#             if swg[sequence[i]] == False:
#                 routeOptimizedNew.append(1)
#                 arrival_time += time_matrix[sequence[i], 1]
#                 routeOptimizedNew.append(sequence[i])
#                 arrival_time += time_matrix[1, sequence[i]]
#         # routeOptimizedNew.append(0)
#         arrival_time += time_matrix[sequence[i], 0]
#         del fullDictionary['Null']
#     print("swgswgswgasfasdfasdfasdf: ", routeOptimizedNew)
#     containerOnTruck = ['Null']
#     route_optimized_full_info = {}
#     runas_optimal = []
#     swing_decisions_opt = []
#     routeIDOptimal = []
#     for nu, i in enumerate(routeOptimizedNew):
#         if i == 0:
#             name = 'Haul'
#             runas_optimal.append('Haul')
#             swing_decisions_opt.append(False)
#         elif i <= len(landfill_locs):
#             name = 'LF1'
#             runas_optimal.append('LF1')
#             swing_decisions_opt.append(False)
#         else:
#             name = f"Stop {i - len(landfill_locs)}"
#             route_optimized_full_info[i] = swg[i]
#             if swg[i] == 0:
#                 runas_optimal.append('DRT')
#                 swing_decisions_opt.append(False)
#             else:
#                 runas_optimal.append('SWG')
#                 swing_decisions_opt.append(True)
#         routeIDOptimal.append(name)

#     for key in fullDictionary.keys():
#         firstCustomer1 = -1
#         dummy = np.inf
#         if len(fullDictionary[key]):
#             for i in fullDictionary[key]:
#                 if time_matrix[0, i] < dummy:
#                     dummy = time_matrix[0, i]
#                     firstCustomer1 = i
#             routeOptimizedNew.append(firstCustomer1)
#             # routeOptimizedNew.append(1)
#             arrival_time += time_matrix[0, firstCustomer1]
#             # arrival_time += time_matrix[firstCustomer1, 1]
#             fullDictionary[key].remove(firstCustomer1)
#             while len(fullDictionary[key]):
#                 dummy = np.inf
#                 nextCustomer = -1
#                 for k in fullDictionary[key]:
#                     if time_matrix[1, k] < dummy:
#                         dummy = time_matrix[1, k]
#                         nextCustomer = k
#                 routeOptimizedNew.append(nextCustomer)
#                 fullDictionary[key].remove(nextCustomer)
#     routeOptimizedNew.append(0)

#     distanceTot = 0
#     timeTot = 0
#     cummDist = [distanceTot]
#     cummTime = [timeTot]
#     total_service_time = sum(service_time)
#     for i in range(len(routeOptimizedNew)-1):
#         if trial:
#             distanceTot += dist_matrix[routeOptimizedNew[i], routeOptimizedNew[i+1]]
#             cummDist.append(distanceTot)
#             timeTot += time_matrix[routeOptimizedNew[i], routeOptimizedNew[i+1]]
#             cummTime.append(timeTot)
#         else:
#             distance_dummy, time_dummy = travel_time_Google(
#                 locations[routeOptimizedNew[i]][1], locations[routeOptimizedNew[i]][0],
#                 locations[routeOptimizedNew[i+1]][1], locations[routeOptimizedNew[i+1]][0],
#                 API_KEY
#             )
#             try:
#                 distance_dummy = float(distance_dummy.replace(' mi', ''))
#             except:
#                 distance_dummy = 1
#             distanceTot += distance_dummy
#             cummDist.append(distanceTot)
#             timeTot += time_dummy
#             cummTime.append(timeTot)

#         # total_service_time = 0
#         # for ttt in service_time:
#         #     total_service_time += ttt
            
#     totalDrivingTimeOptimal = cummTime[-1] + total_service_time
#     totalDrivingDistanceOptimal = cummDist[-1]

#     total_service_time = sum(service_time)
    
#     distanceTotManual = 0
#     timeTotManual = 0
#     cummDistManual = [distanceTotManual]
#     cummTimeManual = [timeTotManual]
#     for i in range(len(route)-1):
#         if trial:
#             distanceTotManual += dist_matrix[route[i], route[i+1]]
#             cummDistManual.append(distanceTotManual)
#             timeTotManual += time_matrix[route[i], route[i+1]]
#             cummTimeManual.append(timeTotManual)
#         else:
#             distance_dummy, time_dummy = travel_time_Google(
#                 locations[route[i]][1], locations[route[i]][0],
#                 locations[route[i+1]][1], locations[route[i+1]][0],
#                 API_KEY
#             )
#             try:
#                 distance_dummy = float(distance_dummy.replace(' mi', ''))
#             except:
#                 distance_dummy = 1
#             distanceTotManual += distance_dummy
#             cummDistManual.append(distanceTotManual)
#             timeTotManual += time_dummy
#             cummTimeManual.append(timeTotManual)
        
#         # total_service_time = 0
#         # for ttt in service_time:
#         #     total_service_time += ttt
    
#     totalDrivingTimeManual = cummTimeManual[-1] + total_service_time
#     totalDrivingDistanManual = cummDistManual[-1]

#     routeID = []
#     runas_manual = []
#     swing_decisionsManual = []
#     route_manual_full_info = {}
#     for nu, i in enumerate(route):
#         if i == 0:
#             runas_manual.append('Haul')
#             name = 'Haul'
#             swing_decisionsManual.append(False)
#         elif i <= len(landfill_locs):
#             name = 'LF1'
#             runas_manual.append('LF1')
#             swing_decisionsManual.append(False)
#         else:
#             name = f"Stop {i - len(landfill_locs)}"
#             route_manual_full_info[i] = swg[i]
#             if swg[i] == 1:
#                 runas_manual.append('SWG')
#                 swing_decisionsManual.append(True)
#             else:
#                 runas_manual.append('DRT')
#                 swing_decisionsManual.append(False)
#         routeID.append(name)

#     routeIDOptimal_list = []
#     print("12121212121212", routeOptimizedNew)
#     for nu, i in enumerate(routeOptimizedNew):
#         if i == 0:
#             name = 'Haul'
#         elif i <= len(landfill_locs):
#             name = 'LF1'
#         else:
#             name = f"Stop {i - len(landfill_locs)}"
#         routeIDOptimal_list.append(name)

#     dictionary_outcome[location_id] = [
#         totalDrivingTimeOptimal, totalDrivingDistanceOptimal,
#         totalDrivingTimeManual, totalDrivingDistanManual,
#         np.round(swg.count(0)/(len(swg)-len(landfill_locs)-1)*100, 2),
#         np.round(swg.count(1)/(len(swg)-len(landfill_locs)-1)*100, 2),
#         len(swg)-len(landfill_locs)-1,
#         [routeIDOptimal_list, runas_optimal],
#         [routeID, runas_manual]
#     ]

#     newStops = []
#     for i in routeOptimizedNew:
#         if i <= len(landfill_locs):
#             continue
#         if i not in newStops:
#             newStops.append(i)
#     optimal_sequence = create_route_stops(1, newStops, land_fill_dic, locations, landfill_locs)
#     hauling_loc_coord = (df_route.iloc[0]['HL_Lat'], df_route.iloc[0]['HL_Longt'])
#     route_map_optimal = RouteVisualizer.create_map(
#         stops=stops11,
#         sequence=optimal_sequence,
#         route_info=route_optimized_full_info,
#         swing_decisions=route_manual_full_info,
#         landfill_locs=landfill_locs,
#         hauling_loc=hauling_loc_coord
#     )
#     new_s = location_id.replace("/", "_")
#     route_map_optimal.save(f"maps/optimal_map{new_s}.html")

#     newStopsManual = []
#     for i in route:
#         if i <= len(landfill_locs):
#             continue
#         if i not in newStopsManual:
#             newStopsManual.append(i)
#     manual_sequence = create_route_stops(1, newStopsManual, land_fill_dic, locations, landfill_locs)
#     route_map_manual = RouteVisualizer.create_map(
#         stops=stops11,
#         sequence=manual_sequence,
#         route_info=route_manual_full_info,
#         swing_decisions=route_manual_full_info,
#         landfill_locs=landfill_locs,
#         hauling_loc=hauling_loc_coord
#     )
#     route_map_manual.save(f"maps/manual_map{new_s}.html")
#     # print(f"Maps saved for route {location_id}")

#     rows = []
#     for k, v in dictionary_outcome.items():
#         row = [k] + v[:7] + [v[7], v[8]]
#         print(row)
#         rows.append(row)
#     columns = ["Route_ID", "Driving Time (min) Optimal", "Driving Distance (mile) Optimal", 
#             "Driving Time (min.) Manual", "Driving Distance (mile) Manual", 'Percentage of DRT', 
#             'Percentage of Swing', 'Number of Stops', 'Route Optimal', 'Route Manual']
    
#     df_results = pd.DataFrame(rows, columns=columns)
#     # print(df_results)
#     # df_results.to_csv('IND_results.csv', index=False)

#     # === New Code: Save sequences row wise to "sequence_row.csv" ===
#     def get_stop_name(idx):
#         if idx == 0:
#             return "Haul"
#         elif idx == 1:
#             return "LF"
#         else:
#             return f"Stop {idx - len(landfill_locs)}"

#     # Process the optimal route segments
#     optimal_segments = []
#     # print(routeOptimizedNew)
#     sum_optimal = 0
#     for i in range(len(routeOptimizedNew) - 1):
#         start_idx = routeOptimizedNew[i]
#         end_idx = routeOptimizedNew[i + 1]
#         segment_str = f"{get_stop_name(start_idx)} -> {get_stop_name(end_idx)}"
        
#         # Calculate travel time in minutes (time_matrix is in hours)
#         travel_time_min = time_matrix[start_idx, end_idx] * 60
        
#         # Add the service time at the destination stop if it is not a depot
#         additional_service_time = 0
#         if end_idx > 1:
#             # Map the route index to the service_time list index (assuming stops start at index 2)
#             service_index = end_idx - 2  
#             if service_index < len(service_time):
#                 additional_service_time = service_time[service_index]
        
#         total_segment_time = travel_time_min + additional_service_time * 60
#         seg_distance = dist_matrix[start_idx, end_idx]  # Assumes distance is in km
#         if isinstance(perm_notes[start_idx], str):
#             time_match = re.search(r'(\d{1,2}(:\d{2})?[APM]{2})\b(?!\s*\.)', perm_notes[start_idx])
#             if time_match:
#                 service_time_note = time_match.group(0)
#             else:
#                 service_time_note = ""
#         else:
#             service_time_note = ""
#         print("route_optimal_timing_calc", travel_time_min, additional_service_time)
#         optimal_segments.append({
#             "Route_ID": location_id,
#             "Route_Type": "Optimal",
#             "Segment": segment_str,
#             "Time (min)": round(total_segment_time, 2),
#             "Distance (km)": round(seg_distance, 2),
#             "Service Time": additional_service_time * 60,
#             "PERM_NOTES": service_time_note,
#             "NOTE": perm_notes[start_idx]
#         })
#         sum_optimal += total_segment_time

#     # Process the manual route segments
#     # print(route)
#     manual_segments = []
#     sum_manual = 0
#     for i in range(len(route) - 1):
#         start_idx = route[i]
#         end_idx = route[i + 1]
#         segment_str = f"{get_stop_name(start_idx)} -> {get_stop_name(end_idx)}"
        
#         travel_time_min = time_matrix[start_idx, end_idx] * 60
        
#         additional_service_time = 0
#         if end_idx > 1:
#             service_index = end_idx - 2
#             if service_index < len(service_time):
#                 additional_service_time = service_time[service_index]
        
#         total_segment_time = travel_time_min + additional_service_time * 60
#         seg_distance = dist_matrix[start_idx, end_idx]
#         if isinstance(perm_notes[start_idx], str):
#             time_match = re.search(r'(\d{1,2}(:\d{2})?[APM]{2})\b(?!\s*\.)', perm_notes[start_idx])
#             if time_match:
#                 service_time_note = time_match.group(0)
#             else:
#                 service_time_note = ""
#         else:
#             service_time_note = ""
#         print("route_manual_timing_calc", travel_time_min, additional_service_time)
#         manual_segments.append({
#             "Route_ID": location_id,
#             "Route_Type": "Manual",
#             "Segment": segment_str,
#             "Time (min)": round(total_segment_time, 2),
#             "Distance (km)": round(seg_distance, 2),
#             "Service Time": additional_service_time * 60,
#             "PERM_NOTES": service_time_note, 
#             "NOTE": perm_notes[start_idx]
#         })
#         sum_manual += total_segment_time

#     # Combine and save the segment details to a CSV file
#     all_segments = optimal_segments + manual_segments
#     seq_csv_file = f"services/route_optimization_output/Sequence/sequence_row{location_id_for_name}.csv"
#     # seq_csv_file = f"sequence_row{location_id_for_name}.csv"
#     df_seq = pd.DataFrame(all_segments)
#     df_seq.to_csv("sequence_row.csv", index=False)
#     os.makedirs("services/route_optimization_output/Sequence/", exist_ok=True)
#     try:
#         df_seq.to_csv(seq_csv_file, index=False)
#     except Exception as e:
#         print(f"Failed to write CSV: {e}")
#         pass
#     # print(sum_manual, sum_optimal)
#     df_results["Driving Time (min) Optimal"] = [sum_optimal / 60]
#     df_results["Driving Time (min.) Manual"] = [sum_manual / 60]
#     df_results.to_csv(f'IND_results.csv', index=False)
#     try:
#         df_results.to_csv(f'services/route_optimization_output/IND_results/IND_results{location_id_for_name}.csv', index=False)
#     except Exception as e:
#         print(f"Failed to write CSV: {e}")
#         pass
#     # df_results.to_csv(f'IND_results{location_id_for_name}.csv', index=False)

#     columns = ["Route_ID", "Driving Time (min) Optimal", "Driving Distance (mile) Optimal", 
#             "Driving Time (min.) Manual", "Driving Distance (mile) Manual", 'Percentage of DRT', 
#             'Percentage of Swing', 'Number of Stops', 'Route Optimal', 'Route Manual']
#     df_route_info = filtered_df[filtered_df['Route #'] == route_location_id].copy().iloc[0]
#     print("new", df_results["Driving Time (min) Optimal"])
#     print("new", df_results["Driving Time (min.) Manual"])
#     return {
#         "Route_ID": location_id,
#         "Driving Time (min) Optimal": df_results["Driving Time (min) Optimal"],
#         "Driving Distance (mile) Optimal": df_results["Driving Distance (mile) Optimal"],
#         "Driving Time (min) Manual": df_results["Driving Time (min.) Manual"],
#         "Driving Distance (mile) Manual": df_results["Driving Distance (mile) Manual"],
#         "Percentage of DRT": df_results["Percentage of DRT"],
#         "Percentage of Swing": df_results["Percentage of Swing"],
#         "Number of Stops": df_results["Number of Stops"],
#         "Route Optimal": df_results["Number of Stops"],
#         "Route Manual": df_results["Number of Stops"],
#         "DATE": df_route_info["SERVICE_DATE"],
#         "HF_DIVISION_NAME": df_route_info["HF_DIVISION_NAME"],
#         "HF_SITE_NAME": df_route_info["HF_SITE_NAME"],
#         "HF_ADDRESS_LINE1": df_route_info["HF_ADDRESS_LINE1"],
#         "HF_ADDRESS_LINE2": df_route_info["HF_ADDRESS_LINE2"],
#         "HF_ADDRESS_CITY": df_route_info["HF_ADDRESS_CITY"],
#         "HF_ADDRESS_STATE": df_route_info["HF_ADDRESS_STATE"],
#         "HF_ADDRESS_POSTAL_CODE": df_route_info["HF_ADDRESS_POSTAL_CODE"],
#         "DF_FACILITY_NAME": df_route_info["DF_FACILITY_NAME"],
#         "DF_ADDRESS_LINE1": df_route_info["DF_ADDRESS_LINE1"],
#         "DF_ADDRESS_LINE2": df_route_info["DF_ADDRESS_LINE2"],
#         "DF_ADDRESS_CITY": df_route_info["DF_ADDRESS_CITY"],
#         "DF_ADDRESS_STATE": df_route_info["DF_ADDRESS_STATE"],
#         "DF_ADDRESS_POSTAL_CODE": df_route_info["DF_ADDRESS_POSTAL_CODE"],
#         "Time Benefit": float(df_results["Driving Time (min.) Manual"].iloc[0]) - float(df_results["Driving Time (min) Optimal"].iloc[0]),
#         "Distance Benefit": float(df_results["Driving Distance (mile) Manual"].iloc[0]) - float(df_results["Driving Distance (mile) Optimal"].iloc[0]),
#         "Benefit": float(df_results["Driving Time (min.) Manual"].iloc[0]) > float(df_results["Driving Time (min) Optimal"].iloc[0])
#     }